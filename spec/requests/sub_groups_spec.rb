require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/sub_groups", type: :request do

  # SubGroup. As you add validations to SubGroup, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'SubGroup', group: group }
  }

  let(:invalid_attributes) {
    { name: 'SubGroup', group_id: group.id + 1 }
  }

  let(:group) {
    create(:group)
  }

  let(:user) { create(:user) }

  before(:each) do
    login_as(user)
  end
  describe "GET /index" do
    it "renders a successful response" do
      SubGroup.create! valid_attributes
      get group_sub_groups_path(group)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      sub_group = SubGroup.create! valid_attributes
      get group_sub_group_path(group, sub_group)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_group_sub_group_path(group)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      sub_group = SubGroup.create! valid_attributes
      get edit_group_sub_group_path(group, sub_group)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new SubGroup" do
        expect {
          post group_sub_groups_path(group), params: { sub_group: valid_attributes }
        }.to change(SubGroup, :count).by(1)
      end

      it "redirects to the created sub_group" do
        post group_sub_groups_path(group), params: { sub_group: valid_attributes }
        expect(response).to redirect_to(group_sub_group_path(group, SubGroup.last))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: 'Updated name' }
      }

      it "updates the requested sub_group" do
        sub_group = SubGroup.create! valid_attributes
        patch group_sub_group_path(group, sub_group), params: { sub_group: new_attributes }
        sub_group.reload
        expect(sub_group.name).to be_eql(new_attributes[:name])
      end

      it "redirects to the sub_group" do
        sub_group = SubGroup.create! valid_attributes
        patch group_sub_group_path(group, sub_group), params: { sub_group: new_attributes }
        sub_group.reload
        expect(response).to redirect_to(group_sub_group_path(group, sub_group))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested sub_group" do
      sub_group = SubGroup.create! valid_attributes
      expect {
        delete group_sub_group_path(group, sub_group)
      }.to change(SubGroup, :count).by(-1)
    end

    it "redirects to the sub_groups list" do
      sub_group = SubGroup.create! valid_attributes
      delete group_sub_group_url(group, sub_group)
      expect(response).to redirect_to(group_sub_groups_url)
    end
  end
end
